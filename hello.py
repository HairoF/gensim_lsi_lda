documents = [
    "Верстать сайты в html и CSS Разрабатывать клиентскую часть сайта на React Программировать на языках JavaScript и TypeScript Работать с базами данных с использованием MongoDB Создавать серверную часть на Node.js, Express.js, Nest.js Работать с API сторонних сервисов и проводить Unit-тестирование Новичкам в программировании Начинающим разработчикам Frontend и backend разработчикам",
    "Работать с инструментами разработки Node.js; Использовать библиотеки и фреймворки Node.js: Express.js, Nest.js; Писать на TypeScript и использовать инструменты tsc, tslint/eslint; Подключать и использовать в проекте базы данных (MongoDB); Настраивать обмен данными между клиентом и сервером (WebSocket); Работать с ПО для автоматизации развёртывания и управления приложениями (Docker); Настраивать аутентификацию с помощью Passport.js; Писать unit-тесты; Использовать Google Firebase",
    "Работа с props, управление внутренним состоянием компонента и обработка данных из форм; Владею продвинутыми техниками композиции компонентов и работы с дочерними компонентами; Использую самое современное API: хуки и Context API",
    "Верстка сайтов в html и CSS; Работа с frontend-частью проекта на JavaScript; Работа с backend-частью проекта на PHP; Работа с изменениями кода проекта с помощью Git и GitHub; Разработка сайтов с помощью фреймворка Bitrix; Управление сайтами на платформе 1C-Bitrix; Работа с API сторонних сервисов; Работа с новым ядром платформы Bitrix D7",
    "Верстка под тач и мобильные устройства; Работа с Flexbox и JavaScript; Способность правильно использовать переменные, числа и строки; Создание прототипа и конструктора объекта; Использование выражений в JavaScript; Применение символов, итераторов и генераторов; Импорт и экспорт модулей; Создание интерактивных веб-страниц; Работа с файлами и медиаресурсами; Применение принципов клиент-серверного взаимодействия; Создание одностраничных веб-приложений (SPA); Навыки использования библиотеки React,  JSX, React router, VirtualDom",
    "Сбор и подготовка данных для анализа; Умение писать сложные запросы на SQL; Импорт и экспорт данных; Понимание архитектуры и структуры БД; Группировка и фильтрация данных из БД; Работа с разными форматами файлов",
    "Построение работы сетей и работы сетевого стека; Создание распределённых информационных систем; Аудит информационных систем в области информационной безопасности; Построение системы информационной безопасности; Понимание типов атак на информационные системы и используемых механизмов ; Анализ инцидентов и разработка мер реагирования; Знание криптографических и некриптографических методов защиты информации, влияния человеческого фактора; Знание нормативно-правовых актов в сфере ИБ Российской Федерации, сфере ответственности государственных структур: ФСТЭК, ФСБ, Министерство Обороны, ЦБ; Владение Kubernetes на продвинутом уровне, разворачивание кластера Kubernetes, работа с конфигурацией и сетевой безопасностью; Знание международного законодательства, отраслевых стандартов: PCI-DSS, OWASP ; Работа с операционными системами ",
    "Сайт — это некая заявка себя на просторах интернета. Это портфолио или же красивая обложка, которую видят пользователи интернета. Представим, что у вас есть собственное дело и ему нужен качественно новый уровень. А может быть Вы творческая личность, но отсутствие собственных галерей, где вы бы могли разместить свои произведения, не дают вам полностью раскрыться и развиваться в дальнейшем. Или же у вас масса практических знаний, которыми вы могли бы поделиться, но у вас отсутствует потенциальная аудитория слушателей. Для всего этого есть решение. От вас требуется желание, а всё остальное реализуемо и не требует стартовых капиталовложений. Требуется только немного Вашего терпения и трудолюбия, чтобы создать свой первый качественный продукт в интернете.КРАТКИЙ ПЛАН ОТКРЫТИЯ СОБСТВЕННОГО САЙТА В ИНТЕРНЕТЕ1)  Открываете свой личный кабинет на площадке хостинг-провайдера и  оплачиваете его. Вы можете выбрать любой хостинг, но в практическом  курсе приведен пример создания сайта на хостинге 1gbНа хостинге приобретаем себе домен.2)  Определяемся с контентом - информацией, которая будет выложена на  сайте. Вы должны решить, что будет на главной странице, что будет в  основных разделах. К примеру, можно создать раздел: «Контакты» или «Информация о вас». Заранее  пропишите, в каком виде должен быть представлен ваш сайт в сети. На  этом этапе вы готовите необходимый контент и информацию для вашего  сайта.3) Скачиваете систему создания и управления сайтом CMS Wordpress.4) Загружаете его на свой хостинг.5) Устанавливаете свой движок на сайт. На деле это занимает не более 3 минут. 6) После того, как он будет установлен заходите в панель управления и настраиваете тему своего сайта. Вы  можете выбрать любую тему из огромного числа, которые предлагает  WordPress или же, скачать тему с другого ресурса и установить на свой  сайт.7) Редактируете тему под себя и начинаете загружать на него свой контент, который вы заранее продумали и подготовили.8) Устанавливаете дополнительные плагины для повышения качества работы сайта и доступа к различным дополнительным функциям.Добро пожаловать в мир увлекательного творчества под названием сайтостроения и веб-дизайна! PS: Друзья! Подписывайтесь на мой Инстаграм, где Вы будете получать максимум полезной и нужной информации. Как для саморазвития, так и для старта в более серьезных проектах. Ссылку на мой аккаунт Вы найдете в первом блоке моего учебного курса.Подпишитесь на мой Инстаграм и напишите Udemy. И я пришлю Вам чек-лист по бесплатной настройке аккаунта прямо сейчас!",
    "Добро пожаловать на вторую часть курса по основам JavaScript для начинающих веб-разработчиков! Если вы начинающий веб-разработчик, то вы находитесь в нужном месте! JavaScript - это основной язык, который используется для веб-разработки. Но применение JavaScript не ограничивается только фронтендом, на нем также можно создавать бэкенд сайтов (Node.JS), мобильные приложения (React Native), даже десктопные приложения, и все это с использованием одного лишь JavaScript!Что такое Vanilla JS? Это термин для обозначения \"чистого\" JavaScript без использования каких-либо библиотек и фреймворков. К сожалению, сейчас на рынке очень много узких специалистов - по React, по Angular, по Vue.js и т.д., но очень мало специалистов по чистому JavaScript. Правда в том, что один раз выучив Vanilla JS вы потом сможете легко применять полученные знания при работе в любом другом фреймворке, который основан на javascript. Таким образом, вы получите конкурентное преимущество при трудоустройстве, ведь вы будете знать язык, а не какой-то отдельный фреймворк или библиотеку!После прохождения курса вы:Поймете всю мощь языка JavaScript и его интерактивных возможностей!Создадите с нуля клон Paint, который будет работать прямо в окне браузера с помощью JavaScriptНаучитесь работать с Canvas и его свойствамиЧто мы изучим:Работа с HTML5 Canvas из JavaScriptОбработка событий мыши2D контекст2D рисование в браузереИзменение размера кистиСохранение изображения на локальном компьютереЧто мы сделаем на практике:Клон программы Paint, который будет работать прямо в окне браузераВнедрим палитру для редактирования цвета рисованияСделаем два режима работы - рисование и заливка цветомДобавим функцию сохранения изображения на локальном компьютереДо встречи на уроках!Добро пожаловать на курс по основам JavaScript - часть 2!",
    "Разработка с нуля Java приложения на самом современном и востребованном стеке: Spring Boot 2.4, Spring Data Rest/HATEOAS, Lombok, JPA, H2, ....Мы создадим с нуля основу любого современного REST веб-приложения: аутентификация и авторизация на основе ролей, регистрация пользователя в приложении, управление своим профилем и администрирование пользователейДля кого:Для тех, кто еще не работал со Spring/ Hibernate/ JPA и хотел бы получить первый опытДля разработчиков, готовый углубится в детали Spring BootДля опытных разработчиков, которым интересен код проекта и детали реализации.Для прохождения достаточно некоторого опыта программирования на Java. Желательно опыт с Ultimate IDEA и знание азов Git. Курс НЕ научит вас программировать.Он даст почувствовать вкус современной Java разработки, \"аванс\", который затем нужно будет отрабатывать, обучаясь самостоятельно решать типичные задачи Java разработчика, читать логи, дебажить, искать решения и выбирать из них лучшее. И, конечно же, кодировать. Красиво, чисто и правильно, без больших ляпов по незнанию или невниманию.Т.е. участие в больших Enterprise проектах, практика от профессиональных разработчиков.Программа:1. Основы Spring BootЧто такое Spring-Boot. Первое приложение / Spring InitializrSpring Boot maven plugin. Конвертация в WAR. Детали реализацииНастройка проектаПроект Lombok2. Работа с DB (H2, Spring Data JPA)Spring Data JPA. ApplicationRunnerH2. Популирование и конфигурированиеРефакторинг model. Spring Data JPA @Query3. Spring Data REST + HATEOASSpring Data RESTКонфигурирование Jackson4. Spring SecurityПодключение Security. Аутентификация по умолчаниюКонфигурирование в коде приложения. Password EncodingАутентификация пользователя из БД. AuthUserRole and GrantedAuthorityBasic authorization. Кастомизация Json5. REST. AccountControllerREST AccountControllerError handlingДобавление HATEOAS в AccountController. Paging",
    "Добро пожаловать на курс Основы Ruby on Rails для новичков! В этом курсе вы узнаете как создать простую версию образовательной платформы с помощью Ruby on Rails и YouTube API.Что такое Ruby on Rails?Ruby on Rails - это фреймворк для веб разработки, написанный на языке программирования Ruby. И это один из самых популярных и мощных инструментов для создания динамических веб-приложений. Rails используют такие большие компании, как Airbnb, Github, Kickstarter и Твиттер.Почему так много стартапов используют Ruby on Rails?Во-первых, Rails имеет на 100% открытый исходный код. Это значит, что кто угодно может его использовать абсолютно бесплатно. Во-вторых, у Rails очень большое комьюнити с сотнями разработчиков и большим числом джемов. Джем - это что-то вроде плагина, который вы можете добавить для расширения функционала проекта. Например, если в вашем проекте необходима система аутентификации, чтобы управлять пользователями, то вам не нужно создавать все с нуля. Вместо этого вы можете просто подключить джем, который называется Devise и легко и просто интегрировать его в ваше приложение. В-третьих, вы можете сделать собственное приложения на Rails очень быстро, и соответственно, время выхода на рынок будет существенно уменьшено. Это особенно важно для стартапов на ранних стадиях, когда им нужно проверить идею как можно скорее с помощью MVP или прототипа, до того, как инвестировать в этот продукт.Что мы получим по итогу этого курса?Вместе с вами мы сделаем проект под названием Udemo, в котором вы сможете создать множество курсов с видео, которое будет размещаться на ютубе. Вы видите стартовую страницу проекта, аналогичную сайту Udemy. Если мы кликнем на один из курсов, то увидим страницу с подробностями о курсе с видео, изображением, заголовком, рейтингом и описанием. Все достаточно просто. Также вы научитесь легко создавать статичные страницы на Rails. Например, шаблон страницы о проекте, на котором будет информация об авторе проекта и встроенная лента твиттера. Также на странице \"Контакты\" мы отобразим информацию с Яндекс Карт. Помимо статичных страниц, мы также научимся создавать динамические страницы, на которых мы сможем создавать курсы заполняя всю необходимую информацию, а также с возможностью редактирования существующих курсов. После этого вы сможете открыть полученный курс и встроить в него видео, которое хранится на видеохостинге.После завершения курса вы поймете как работает структура MVC (Модель-Представление-Контроллер), и как происходит взаимодействие между различными компонентами приложения Rails. Вы научитесь использовать команды для создания моделей, контроллеров и представлений, как создавать основные методы и кастомные ссылки, и многое-многое другое всего за полтора часа времени.Наконец, мы будем использовать фреймворк Bootstrap для построения интерфейса нашего приложения. И я гарантирую, что вы удивитесь как легко и просто с помощью этого фреймворка можно создавать пользовательские интерфейсы, даже если у вас не сильно большие познания в области HTML и CSS.Давайте начнем!",
    "Добро пожаловать на курс!Исходный код обновлен под Swift 4, Xcode 9. О монетизации приложения с помощью встроенных покупок (In-App Purchase). Также выложена инструкция для настройки iAP через itunes Connect, а также полностью законченный проект на языке Swift 3 со всеми ресурсами.Рассказывается о монетизации приложения с помощью Google AdMob Interstitial. Вы любите играть? Игры приносят вам удовольствие? А еще большее удовольствие Вы получите от создания вашей собственной игры! Этот курс научит вас шаг за шагом создавать интересную и популярную игру. Узнаете, как осуществлять переход между сценами. Как реализуется логика и физика игры. Как внедрить рекламу в игру, чтобы она приносила Вам доход, используя adMob и узнаете многое другое.",
    "Это мини курс, по своей сути это вводная часть для того, чтобы вы определились, стоит ли вам заниматься обучением на программиста java. Здесь, я помогаю вам понять, чем занимается java программист.Что он делает на своей работе.Сколько зарабатывают программисты. Что нужно учить чтобы стать Junior Java Developer С нуля. Как учиться и как выбрать курс. Я рекомендую обязательно посмотреть этот бесплатный курс, перед тем как покупать что-то. Самая большая проблема, в том чтобы стать программистом, это быстро разочароваться. Я надеюсь, что вы поймёте, что программирование это не то, что можно выучить за пару часов. Это ваша работа над собой на всю жизнь.",
    "The intersection graph of paths in trees",
    "Graph minors IV Widths of trees and well quasi ordering",
    "Human machine interface for lab abc computer applications",
]
import gensim
from gensim import corpora

from pymystem3 import Mystem
mystem = Mystem()
from string import punctuation
import pickle
import re
from nltk.stem.snowball import SnowballStemmer
stemmer = SnowballStemmer("russian")

import nltk

russian_stopwords = ['и', 'в', 'во', 'не', 'что', 'он', 'на', 'я', 'с', 'со', 'как', 'а', 'то', 'все', 'она', 'так', 'его', 'но', 'да', 'ты', 'к', 'у', 'же', 'вы', 'за', 'бы', 'по', 'только', 'ее', 'мне', 'было', 'вот', 'от', 'меня', 'еще', 'нет', 'о', 'из', 'ему', 'теперь', 'когда', 'даже', 'ну', 'вдруг', 'ли', 'если', 'уже', 'или', 'ни', 'быть', 'был', 'него', 'до', 'вас', 'нибудь', 'опять', 'уж', 'вам', 'ведь', 'там', 'потом', 'себя', 'ничего', 'ей', 'может', 'они', 'тут', 'где', 'есть', 'надо', 'ней', 'для', 'мы', 'тебя', 'их', 'чем', 'была', 'сам', 'чтоб', 'без', 'будто', 'чего', 'раз', 'тоже', 'себе', 'под', 'будет', 'ж', 'тогда', 'кто', 'этот', 'того', 'потому', 'этого', 'какой', 'совсем', 'ним', 'здесь', 'этом', 'один', 'почти', 'мой', 'тем', 'чтобы', 'нее', 'сейчас', 'были', 'куда', 'зачем', 'всех', 'никогда', 'можно', 'при', 'наконец', 'два', 'об', 'другой', 'хоть', 'после', 'над', 'больше', 'тот', 'через', 'эти', 'нас', 'про', 'всего', 'них', 'какая', 'много', 'разве', 'три', 'эту', 'моя', 'впрочем', 'хорошо', 'свою', 'этой', 'перед', 'иногда', 'лучше', 'чуть', 'том', 'нельзя', 'такой', 'им', 'более', 'всегда', 'конечно', 'всю', 'между']


def preprocess_text(document):
    # Remove all the special characters
    document = re.sub(r'\W', ' ', str(document))
    # remove all single characters
    document = re.sub(r'\s+[a-zA-Z]\s+', ' ', document)
    # Remove single characters from the start
    document = re.sub(r'\^[a-zA-Z]\s+', ' ', document)
    # Substituting multiple spaces with single space
    document = re.sub(r'\s+', ' ', document, flags=re.I)
    # Removing prefixed 'b'
    document = re.sub(r'^b\s+', '', document)
    # Converting to Lowercase
    document = document.lower()

    # tokens = document.split()
    # tokens = [stemmer.stem(word) for word in tokens]
    tokens = mystem.lemmatize(document)
    tokens = [token for token in tokens if token not in russian_stopwords
              and token != " "
              and token.strip() not in punctuation]

    return tokens

processed_data = []
for doc in documents:
    tokens = preprocess_text(doc)
    processed_data.append(tokens)

# Use corpora from gensim

gensim_dictionary = corpora.Dictionary(processed_data)
gensim_corpus = [gensim_dictionary.doc2bow(token, allow_update=True) for token in processed_data]



pickle.dump(gensim_corpus, open('gensim_corpus_corpus.pkl', 'wb'))
gensim_dictionary.save('gensim_dictionary.gensim')


lsa_model = gensim.models.lsimodel.LsiModel(gensim_corpus, num_topics=8, id2word=gensim_dictionary)
lsa_model.save('gensim_model.gensim')

# test_doc = 'Версталщик. Знания языка Javascript. Frontend разработчик'
# test_doc = preprocess_text(test_doc)
# bow_test_doc = gensim_dictionary.doc2bow(test_doc)
# bow_test_doc_lsa = lsa_model[bow_test_doc]
#
#
# from gensim import similarities
# index = similarities.MatrixSimilarity(lsa_model[gensim_corpus])
# sims = index[bow_test_doc_lsa]
#
# sims = sorted(enumerate(sims), key=lambda item: -item[1])
# for doc_position, doc_score in sims:
#     print(doc_score, doc_position)

